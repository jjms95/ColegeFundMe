require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe KeyDonorChildrenController, type: :controller do

	# This should return the minimal set of attributes required to create a valid
	# KeyDonorChild. As you add validations to KeyDonorChild, be sure to
	# adjust the attributes here as well.
	let(:child){ FactoryGirl.create(:user)}
	let(:other_child){ FactoryGirl.create(:user)} 
	let(:key_donor){ FactoryGirl.create(:user)}
	let(:parent){ FactoryGirl.create(:user)}

	let(:valid_attributes){{child_id:child[:id],key_donor_id:key_donor[:id],relationship:"cousin"}}
	let(:invalid_attributes) {{child_id:nil}}
	before do
		parent.add_role(:parent)
		sign_in parent   
	end

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# KeyDonorChildrenController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET #index" do
		it "assigns all key_donor_children as @key_donor_children" do
			key_donor_child = KeyDonorChild.create! valid_attributes
			get :index, params: {}, session: valid_session
			expect(assigns(:key_donor_children)).to eq([key_donor_child])
		end
	end

	describe "GET #show" do
		it "assigns the requested key_donor_child as @key_donor_child" do
			key_donor_child = KeyDonorChild.create! valid_attributes
			get :show, params: {id: key_donor_child.to_param}, session: valid_session
			expect(assigns(:key_donor_child)).to eq(key_donor_child)
		end
	end

	describe "GET #new" do
		it "assigns a new key_donor_child as @key_donor_child" do
			get :new, params: {}, session: valid_session
			expect(assigns(:key_donor_child)).to be_a_new(KeyDonorChild)
		end
	end

	describe "GET #edit" do
		it "assigns the requested key_donor_child as @key_donor_child" do
			key_donor_child = KeyDonorChild.create! valid_attributes
			get :edit, params: {id: key_donor_child.to_param}, session: valid_session
			expect(assigns(:key_donor_child)).to eq(key_donor_child)
		end
	end

	describe "POST #create" do
		context "with valid params" do
			it "creates a new KeyDonorChild" do
				expect {
					post :create, params: {key_donor_child: valid_attributes}, session: valid_session
				}.to change(KeyDonorChild, :count).by(1)
			end

			it "assigns a newly created key_donor_child as @key_donor_child" do
				post :create, params: {key_donor_child: valid_attributes}, session: valid_session
				expect(assigns(:key_donor_child)).to be_a(KeyDonorChild)
				expect(assigns(:key_donor_child)).to be_persisted
			end

			it "redirects to the created key_donor_child" do
				post :create, params: {key_donor_child: valid_attributes}, session: valid_session
				expect(response).to redirect_to(KeyDonorChild.last)
			end
		end

		context "with invalid params" do
			it "assigns a newly created but unsaved key_donor_child as @key_donor_child" do
				post :create, params: {key_donor_child: invalid_attributes}, session: valid_session
				expect(assigns(:key_donor_child)).to be_a_new(KeyDonorChild)
			end

			it "re-renders the 'new' template" do
				post :create, params: {key_donor_child: invalid_attributes}, session: valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT #update" do
		context "with valid params" do
			let(:new_attributes) {
				skip("Add a hash of attributes valid for your model")
			}

			it "updates the requested key_donor_child" do
				key_donor_child = KeyDonorChild.create! valid_attributes
				put :update, params: {id: key_donor_child.to_param, key_donor_child: new_attributes}, session: valid_session
				key_donor_child.reload
				skip("Add assertions for updated state")
			end

			it "assigns the requested key_donor_child as @key_donor_child" do
				key_donor_child = KeyDonorChild.create! valid_attributes
				put :update, params: {id: key_donor_child.to_param, key_donor_child: valid_attributes}, session: valid_session
				expect(assigns(:key_donor_child)).to eq(key_donor_child)
			end

			it "redirects to the key_donor_child" do
				key_donor_child = KeyDonorChild.create! valid_attributes
				put :update, params: {id: key_donor_child.to_param, key_donor_child: valid_attributes}, session: valid_session
				expect(response).to redirect_to(key_donor_child)
			end
		end

		context "with invalid params" do
			it "assigns the key_donor_child as @key_donor_child" do
				key_donor_child = KeyDonorChild.create! valid_attributes
				put :update, params: {id: key_donor_child.to_param, key_donor_child: invalid_attributes}, session: valid_session
				expect(assigns(:key_donor_child)).to eq(key_donor_child)
			end

			it "re-renders the 'edit' template" do
				key_donor_child = KeyDonorChild.create! valid_attributes
				put :update, params: {id: key_donor_child.to_param, key_donor_child: invalid_attributes}, session: valid_session
				expect(response).to render_template("edit")
			end
		end
	end

	describe "DELETE #destroy" do
		it "destroys the requested key_donor_child" do
			key_donor_child = KeyDonorChild.create! valid_attributes
			expect {
				delete :destroy, params: {id: key_donor_child.to_param}, session: valid_session
			}.to change(KeyDonorChild, :count).by(-1)
		end

		it "redirects to the key_donor_children list" do
			key_donor_child = KeyDonorChild.create! valid_attributes
			delete :destroy, params: {id: key_donor_child.to_param}, session: valid_session
			expect(response).to redirect_to(key_donor_children_url)
		end
	end

end
